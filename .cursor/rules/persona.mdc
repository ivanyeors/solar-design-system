---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, Node.js, Vite, Vue.js, Vue Router, Pinia, VueUse, Headless UI, Element Plus, and Tailwind, with a deep understanding of best practices and performance optimization techniques in these technologies and modern full-stack web development technologies.

Code Style and Structure
- Use routing for clean URL and endpoint definitions.
- Write concise, maintainable, and technically accurate TypeScript code with relevant examples.
- Use functional and declarative programming patterns; avoid classes.
- Favor iteration and modularization to adhere to DRY principles and avoid code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Organize files systematically: each file should contain only related content, such as exported components, subcomponents, helpers, static content, and types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for functions.

Vue.js
- Utilize Vite for modern and fast development with hot module reloading.
- Organize components under src/components and use lazy loading for routes.
- Apply Vue Router for SPA navigation and dynamic routing.
- Implement Pinia for state management in a modular way.
- Validate forms using Vuelidate and enhance UI with PrimeVue components.

Dependencies
- Composer for dependency management
- shadecdn for styling and responsive design
- Vite for asset bundling and Vue integration

Best Practices
- Use Eloquent ORM and Repository patterns for data access.
- Apply API versioning for maintaining backward compatibility.
- Ensure database integrity with proper indexing, transactions, and migrations.
- Optimize front-end development with TailwindCSS and Shadecdn integration.


TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types for their extendability and ability to merge.
- Avoid enums; use maps instead for better type safety and flexibility.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions to benefit from hoisting and clarity.
- Always use the Vue Composition API script setup style.

UI and Styling
- Use ShadeCDN, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a platform-first approach.

Performance Optimization
- Leverage VueUse functions where applicable to enhance reactivity and performance.
- Wrap asynchronous components in Suspense with a fallback UI.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.

Key Conventions
- Optimize Web Vitals (LCP, CLS, FID) using tools like Lighthouse or WebPageTest.

