name: Deploy to GitHub Pages

on:
  push:
    branches: ['main', 'master']
    paths:
      - 'token-studio/**'
      - '.github/workflows/**'
      - 'src/**'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.vue'
      - '**/*.html'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits for diff checking
        
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          npm install
          # Explicitly install vue-router if needed
          npm list vue-router || npm install vue-router@4
          # Install Vue plugin for Vite if needed
          npm list @vitejs/plugin-vue || npm install -D @vitejs/plugin-vue
        
      - name: Check for token-studio changes
        id: check_changes
        run: |
          git diff --quiet HEAD^ HEAD -- token-studio/ || echo "token_changes=true" >> $GITHUB_OUTPUT
        continue-on-error: true
        
      - name: Check token-studio structure
        if: steps.check_changes.outputs.token_changes == 'true'
        run: |
          ls -la token-studio/
          if [ -f "token-studio/tokens.json" ]; then
            echo "tokens.json exists!"
          else
            echo "Warning: tokens.json not found in token-studio directory"
          fi
        
      - name: Run token splitter if tokens changed
        if: steps.check_changes.outputs.token_changes == 'true'
        run: |
          mkdir -p token-studio/tokens/brands
          mkdir -p token-studio/tokens/color
          mkdir -p token-studio/tokens/font
          mkdir -p token-studio/tokens/scale
          mkdir -p token-studio/src/styles/tokens
          python token-studio/split_tokens.py
        
      - name: Check token directory structure after split
        if: steps.check_changes.outputs.token_changes == 'true'
        run: |
          echo "Directory structure after token split:"
          find token-studio -type d | sort
          echo "Generated SCSS files:"
          find token-studio -name "*.scss" | sort
      
      # Process design tokens to compiled CSS
      - name: Process design tokens
        run: |
          echo "Processing design tokens to compiled CSS..."
          # Ensure target directories exist
          mkdir -p src/styles
          # Run the token processor script
          if ! python scripts/process_tokens.py; then
            echo "‚ùå Token processing failed"
            exit 1
          fi
          
          # Check for successful processing
          if [ -f "src/styles/compiled-tokens.css" ]; then
            echo "‚úÖ Successfully generated compiled-tokens.css"
            ls -la src/styles/compiled-tokens.css
            
            # Analyze resolved vs unresolved tokens
            resolved_tokens=$(grep -c "^  --" src/styles/compiled-tokens.css || echo "0")
            unresolved_color_tokens=$(grep -c "#CCCCCC" src/styles/compiled-tokens.css || echo "0")
            
            echo "üìä Token stats: $resolved_tokens total CSS variables, $unresolved_color_tokens unresolved color tokens"
            
            # If too many unresolved tokens, just warn but don't fail (we use fallbacks)
            if [ "$unresolved_color_tokens" -gt "50" ]; then
              echo "‚ö†Ô∏è Warning: $unresolved_color_tokens unresolved color tokens found"
              echo "Consider improving token definitions or adding better fallbacks"
            fi
          else
            echo "‚ùå Failed to generate compiled-tokens.css"
            exit 1
          fi
      
      # Generate Tailwind semantic utility classes
      - name: Generate token utilities
        run: |
          echo "Generating semantic token utilities..."
          node scripts/generate-token-utilities.js
          if [ -f "src/styles/semanticTokenPlugin.js" ]; then
            echo "‚úÖ Successfully generated semanticTokenPlugin.js"
            ls -la src/styles/semanticTokenPlugin.js
          else
            echo "‚ùå Failed to generate semanticTokenPlugin.js"
            exit 1
          fi
        
      # Creating a proper vite.config.js that includes the Vue plugin
      - name: Configure Vite
        run: |
          if [ -f "vite.config.js" ]; then
            # Backup original config
            cp vite.config.js vite.config.js.backup
            
            # Check if Vue plugin is already imported and used
            if ! grep -q "@vitejs/plugin-vue" vite.config.js; then
              # Add Vue plugin import
              sed -i '1s/^/import vue from "@vitejs\/plugin-vue";\n/' vite.config.js
              
              # Add plugins section if it doesn't exist
              if ! grep -q "plugins:" vite.config.js; then
                sed -i '/defineConfig({/a \  plugins: [vue()],' vite.config.js
              else
                # Add vue plugin to existing plugins array
                sed -i '/plugins:/s/\[/\[vue(), /' vite.config.js
              fi
            fi
            
            # Add vue-router to external if it doesn't exist
            if ! grep -q "rollupOptions" vite.config.js; then
              sed -i '/defineConfig({/a \  build: { rollupOptions: { external: ["vue-router"] } },' vite.config.js
            elif ! grep -q "vue-router" vite.config.js; then
              sed -i '/rollupOptions/s/{/{external: ["vue-router"], /' vite.config.js
            fi
          else
            # Create a new config file with Vue plugin
            echo 'import { defineConfig } from "vite";
            import vue from "@vitejs/plugin-vue";

            export default defineConfig({
              plugins: [vue()],
              build: {
                rollupOptions: {
                  external: ["vue-router"]
                }
              }
            });' > vite.config.js
            fi
              cat vite.config.js
        
      - name: Build for GitHub Pages
        run: npm run build
        
      - name: Restore original Vite config if needed
        run: |
          if [ -f "vite.config.js.backup" ]; then
            mv vite.config.js.backup vite.config.js
          fi
        continue-on-error: true
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist'
          
      - name: Validate build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed - dist directory not found"
            exit 1
          fi
          
          # Check for critical files
          critical_files=("index.html" "assets")
          for file in "${critical_files[@]}"; do
            if [ ! -e "dist/$file" ]; then
              echo "‚ùå Build validation failed - $file not found in dist"
              exit 1
            fi
          done
          echo "‚úÖ Build validation passed"
        
      - name: Check required environment
        run: |
          if [ -z "$NODE_VERSION" ]; then
            echo "‚ùå NODE_VERSION is not set"
            exit 1
          fi
        env:
          NODE_VERSION: 20  # Match your setup-node version
        
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 
